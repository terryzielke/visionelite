jQuery(document).ready(function($) {

    // IMPORTANT: Update this to match the new PHP structure for a full-width section's content
    // The PHP now uses a <table> with class 'single-column-layout'
    $fullWidthEditorContent = '<section class="full-width"><div class="section-header handle"><h2>Full Width</h2><a class="toggle-settings"><span class="dashicons dashicons-admin-generic"></span></a><a class="section-delete"><span class="dashicons dashicons-no"></span></a></div><div class="section-settings"><input type="hidden" class="section-type" value="full-width"><input type="hidden" class="section-bg"><div class="input"><label>ID</label><input type="text" class="section-id"></div><div class="input"><label>Classes</label><input type="text" class="section-class"></div><div class="input"><label for="section-full-width">Viewer Width</label><input type="checkbox" class="section-full-width"></div><div class="input"><label>Background Image</label><a class="select-bg-image">Select</a><a class="remove-bg-image">Remove</a></div></div><div class="section-content"><table class="single-column-layout"><tr><td><figure class="small-img-figure"><img class="small-img-preview" src=""><a class="small-img-select">Add Thumbnail</a><a class="small-img-remove"><span class="dashicons dashicons-no"></span></a><input type="hidden" class="small-img-link"></figure><textarea class="wysiwyg" placeholder="enter your content here"></textarea><div class="cta-button"><a class="add-cta-button">Add CTA Button</a><div class="input"><label>Button Text</label><input type="text" class="btn-text" value=""></div><div class="input"><label>Button Link</label><input type="text" class="btn-link" value=""></div><div class="input"><label for="btn-target">Open In New Tab</label><input type="checkbox" class="btn-target"></div></div></td></tr></table></div></section>';

    // TEMPLATE FOR A SINGLE COLUMN (Reusable)
    // This template will be used for adding new columns dynamically.
    // It matches the structure generated by the PHP's single_content_block.
    $columnContentTemplate = `
        <div class="section-column">
            <a class="column-delete"><span class="dashicons dashicons-no"></span></a>
            <div class="section-column-content">
                <figure class="small-img-figure">
                    <img class="small-img-preview" src="">
                    <a class="small-img-select">Add Thumbnail</a>
                    <a class="small-img-remove"><span class="dashicons dashicons-no"></span></a>
                    <input type="hidden" class="small-img-link">
                </figure>
                <textarea class="wysiwyg" placeholder="enter your content here"></textarea>
                <div class="cta-button">
                    <a class="add-cta-button">Add CTA Button</a>
                    <div class="input"><label>Button Text</label><input type="text" class="btn-text" value=""></div>
                    <div class="input"><label>Button Link</label><input type="text" class="btn-link" value=""></div>
                    <div class="input"><label for="btn-target">Open In New Tab</label><input type="checkbox" class="btn-target"></div>
                </div>
            </div>
        </div>
    `;

    // Updated $columnsEditorContent: This is for adding a new 'columns' section itself.
    // It should include the .columns-container and the 'Add Column' button.
    // When a new 'columns' section is added, it will initially have one empty column.
    $columnsEditorContent = `
        <section class="columns">
            <div class="section-header handle">
                <h2>Columns</h2>
                <a class="toggle-settings"><span class="dashicons dashicons-admin-generic"></span></a>
                <a class="section-delete"><span class="dashicons dashicons-no"></span></a>
            </div>
            <div class="section-settings">
                <input type="hidden" class="section-type" value="columns">
                <input type="hidden" class="section-bg">
                <div class="input"><label>ID</label><input type="text" class="section-id"></div>
                <div class="input"><label>Classes</label><input type="text" class="section-class"></div>
                <div class="input"><label for="section-full-width">Viewer Width</label><input type="checkbox" class="section-full-width"></div>
                <div class="input"><label for="section-collapse">Collapse Spacing</label><input type="checkbox" class="section-collapse"></div>
                <div class="input"><label for="section-reverse">Reverse</label><input type="checkbox" class="section-reverse"></div>
                <div class="input"><label>Background Image</label><a class="select-bg-image">Select</a><a class="remove-bg-image">Remove</a></div>
            </div>
            <div class="section-content">
                <div class="columns-container">
                    ${$columnContentTemplate}
                </div>
                <div class="column-actions">
                    <a class="button button-secondary add-column">Add Column</a>
                </div>
            </div>
        </section>
    `;

    // Updated textImageEditorContent: Matches PHP's table structure.
    $textImageEditorContent = '<section class="text-image"><div class="section-header handle"><h2>Text and Image</h2><a class="toggle-settings"><span class="dashicons dashicons-admin-generic"></span></a><a class="section-delete"><span class="dashicons dashicons-no"></span></a></div><div class="section-settings"><input type="hidden" class="section-type" value="text-image"><input type="hidden" class="section-bg"><div class="input"><label>ID</label><input type="text" class="section-id"></div><div class="input"><label>Classes</label><input type="text" class="section-class"></div><div class="input"><label for="section-full-width">Viewer Width</label><input type="checkbox" class="section-full-width"></div><div class="input"><label for="section-collapse">Collapse Spacing</label><input type="checkbox" class="section-collapse"></div><div class="input"><label for="section-reverse">Reverse</label><input type="checkbox" class="section-reverse"></div><div class="input"><label>Background Image</label><a class="select-bg-image">Select</a><a class="remove-bg-image">Remove</a></div></div><div class="section-content"><table class="single-column-layout"><tr><td><figure class="small-img-figure"><img class="small-img-preview" src=""><a class="small-img-select">Add Thumbnail</a><a class="small-img-remove"><span class="dashicons dashicons-no"></span></a><input type="hidden" class="small-img-link"></figure><textarea class="wysiwyg" placeholder="enter your content here"></textarea><div class="cta-button"><a class="add-cta-button">Add CTA Button</a><div class="input"><label>Button Text</label><input type="text" class="btn-text" value=""></div><div class="input"><label>Button Link</label><input type="text" class="btn-link" value=""></div><div class="input"><label for="btn-target">Open In New Tab</label><input type="checkbox" class="btn-target"></div></div></td><td><figure class="large-img-figure"><img class="large-img-preview" src=""><a class="large-img-remove"><span class="dashicons dashicons-no"></span></a><input type="hidden" class="large-img-link"></figure></td></tr></table></div></section>';

    // Updated imageTextEditorContent: Matches PHP's table structure.
    $imageTextEditorContent = '<section class="image-text"><div class="section-header handle"><h2>Image and Text</h2><a class="toggle-settings"><span class="dashicons dashicons-admin-generic"></span></a><a class="section-delete"><span class="dashicons dashicons-no"></span></a></div><div class="section-settings"><input type="hidden" class="section-type" value="image-text"><input type="hidden" class="section-bg"><div class="input"><label>ID</label><input type="text" class="section-id"></div><div class="input"><label>Classes</label><input type="text" class="section-class"></div><div class="input"><label for="section-full-width">Viewer Width</label><input type="checkbox" class="section-full-width"></div><div class="input"><label for="section-collapse">Collapse Spacing</label><input type="checkbox" class="section-collapse"></div><div class="input"><label for="section-reverse">Reverse</label><input type="checkbox" class="section-reverse"></div><div class="input"><label>Background Image</label><a class="select-bg-image">Select</a><a class="remove-bg-image">Remove</a></div></div><div class="section-content"><table class="single-column-layout"><tr><td><figure class="large-img-figure"><img class="large-img-preview" src=""><a class="large-img-remove"><span class="dashicons dashicons-no"></span></a><input type="hidden" class="large-img-link"></figure></td><td><figure class="small-img-figure"><img class="small-img-preview" src=""><a class="small-img-select">Add Thumbnail</a><a class="small-img-remove"><span class="dashicons dashicons-no"></span></a><input type="hidden" class="small-img-link"></figure><textarea class="wysiwyg" placeholder="enter your content here"></textarea><div class="cta-button"><a class="add-cta-button">Add CTA Button</a><div class="input"><label>Button Text</label><input type="text" class="btn-text" value=""></div><div class="input"><label>Button Link</label><input type="text" class="btn-link" value=""></div><div class="input"><label for="btn-target">Open In New Tab</label><input type="checkbox" class="btn-target"></div></div></td></tr></table></div></section>';

    // Updated shortcodeEditorContent: Matches PHP's table structure.
    $shortcodeEditorContent = '<section class="shortcode"><div class="section-header handle"><h2>Shortcode</h2><a class="toggle-settings"><span class="dashicons dashicons-admin-generic"></span></a><a class="section-delete"><span class="dashicons dashicons-no"></span></a></div><div class="section-settings"><input type="hidden" class="section-type" value="shortcode"><input type="hidden" class="section-bg"><div class="input"><label>ID</label><input type="text" class="section-id"></div><div class="input"><label>Classes</label><input type="text" class="section-class"></div><div class="input"><label for="section-full-width">Viewer Width</label><input type="checkbox" class="section-full-width"></div><div class="input"><label>Background Image</label><a class="select-bg-image">Select</a><a class="remove-bg-image">Remove</a></div></div><div class="section-content"><table class="single-column-layout"><tr><td><div class="input"><label>Shortcode</label><input type="text" class="shortcode"></div></td></tr></table></div></section>';


    // --- Section Management ---

    // toggle section list visibility
    $(document).on('click', '#z_add_section', function() {
        const $sectionList = $('#z_section_list');
        if ($sectionList.hasClass('show')) {
            $sectionList.removeClass('show');
            $(this).text('Add Section');
        } else {
            $sectionList.addClass('show');
            $(this).text('Cancel');
        }
    });

    // on select section type
    $(document).on('click', '#z_section_list .z_section_item', function() {
        const selectedValue = $(this).data('section-type');
        let newSectionHtml = '';

        if (selectedValue === 'full-width') {
            newSectionHtml = $fullWidthEditorContent;
        } else if (selectedValue === 'columns') {
            newSectionHtml = $columnsEditorContent;
        } else if (selectedValue === 'text-image') {
            newSectionHtml = $textImageEditorContent;
        } else if (selectedValue === 'image-text') {
            newSectionHtml = $imageTextEditorContent;
        } else if (selectedValue === 'shortcode') {
            newSectionHtml = $shortcodeEditorContent;
        }

        if (newSectionHtml) {
            $('#z_sections_editor_sections').append(newSectionHtml);
            initWysiwygEditors(); // Initialize WYSIWYG for the newly added section
            $('#z_section_list').removeClass('show');
            $('#z_add_section').text('Add Section');
            z_update_sections_editor(); // Update immediately after adding a new section
        }
    });

    // on keyup in input fields
    $(document).on('keyup', '#z_sections_editor_sections input', function() {
        z_update_sections_editor();
    });

    // on keyup in textarea fields (excluding TinyMCE controlled ones)
    // TinyMCE handles its own keyup/change events.
    $(document).on('keyup', '#z_sections_editor_sections textarea:not(.wysiwyg)', function() {
        z_update_sections_editor();
    });

    // on wysiwyg content change (handled by TinyMCE setup function)
    $(document).on('change', '#z_sections_editor_sections .wysiwyg', function() {
        // This is triggered by TinyMCE's setup function after saving content to the textarea
        z_update_sections_editor();
    });

    // on checkbox change
    $(document).on('change', '#z_sections_editor_sections input[type="checkbox"]', function() {
        setTimeout(function() {
            z_update_sections_editor();
        }, 100); // delay to ensure the change is captured
    });

    // on delete section button click
    $(document).on('click', '#z_sections_editor_sections .section-delete', function() {
        // confirm before deleting
        if (!confirm('Are you sure you want to delete this section?')) {
            return;
        }
        // get the closest section
        const $section = $(this).closest('section');
        // remove the TinyMCE instance(s) if they exist within the section
        $section.find('textarea.wysiwyg').each(function() {
            const id = $(this).attr('id');
            if (tinymce.get(id)) {
                tinymce.get(id).remove();
            }
        });
        // remove the section
        $section.remove();
        // update the editor
        setTimeout(function() {
            z_update_sections_editor();
        }, 100); // delay to ensure the section is removed
    });

    // on toggle settings button click
    $(document).on('click', '#z_sections_editor_sections .toggle-settings', function() {
        const $section = $(this).closest('section');
        $section.toggleClass('settings-open'); // Toggles the class
    });

    // on show cta button fields
    $(document).on('click', '#z_sections_editor_sections .add-cta-button', function(e) {
        e.preventDefault();
        const $cta = $(this).closest('.cta-button');
        $cta.toggleClass('show-button'); // Toggles the class
        // Update immediately if the CTA button fields are shown/hidden
        z_update_sections_editor();
    });

    // --- Column Management (New Functionality) ---

    // Add Column button click for 'columns' sections
    $(document).on('click', '#z_sections_editor_sections .columns .add-column', function(e) {
        e.preventDefault();
        const $columnsContainer = $(this).closest('.section-content').find('.columns-container');
        $columnsContainer.append($columnContentTemplate);
        initWysiwygEditors(); // Initialize TinyMCE for the newly added column
        z_update_sections_editor(); // Update data after adding a column
    });

    // Remove Column button click for individual columns within 'columns' sections
    $(document).on('click', '#z_sections_editor_sections .columns .column-delete', function(e) {
        e.preventDefault();
        // confirm before deleting
        if (!confirm('Are you sure you want to delete this column?')) {
            return;
        }
        const $column = $(this).closest('.section-column');
        const $section = $column.closest('.columns'); // Get the parent section
        
        // Remove TinyMCE instance(s) in this specific column
        $column.find('textarea.wysiwyg').each(function() {
            const id = $(this).attr('id');
            if (tinymce.get(id)) {
                tinymce.get(id).remove();
            }
        });

        $column.remove();

        // If no columns left, add a default one (optional, but good for UX)
        if ($section.find('.section-column').length === 0) {
            $section.find('.columns-container').append($columnContentTemplate);
            initWysiwygEditors();
        }
        
        setTimeout(function() { // Small delay to ensure removal
            z_update_sections_editor();
        }, 100);
    });

    // --- Data Collection and Serialization ---

    // update the template page builder editor field
    // this function collects all the data from the sections and updates the hidden field
    function z_update_sections_editor(){
        // save current TinyMCE content to their respective textareas
        tinymce.triggerSave();
        // initialize fields data variable
        let fieldsData = [];
        
        $('#z_sections_editor_sections').find('section').each(function() {
            const $section = $(this);
            const sectionType = $section.find('.section-type').val();
            
            // Base section data
            let sectionData = {
                type: sectionType,
                bg: $section.find('.section-bg').val(),
                id: $section.find('.section-id').val(),
                class: $section.find('.section-class').val(),
                fullWidth: $section.find('input.section-full-width').is(':checked'),
                collapse: $section.find('input.section-collapse').is(':checked'),
                reverse: $section.find('input.section-reverse').is(':checked'),
            };

            // Add specific data based on section type
            if (sectionType === 'full-width' || sectionType === 'text-image' || sectionType === 'image-text') {
                // For single-column content sections
                sectionData.largeImgLink = $section.find('.large-img-link').val();
                sectionData.smallImgLink = $section.find('.small-img-link').val();
                sectionData.wysiwygContent = (function() {
                    const $wysiwyg = $section.find('> .section-content .wysiwyg'); // Target wysiwyg directly within the section's content
                    const id = $wysiwyg.attr('id');
                    if (id && tinymce.get(id)) {
                        return tinymce.get(id).getContent();
                    }
                    return $wysiwyg.val(); // Fallback if TinyMCE isn't active
                })();
                sectionData.btnText = $section.find('.btn-text').val();
                sectionData.btnLink = $section.find('.btn-link').val();
                sectionData.btnTarget = $section.find('input.btn-target').is(':checked');
            } else if (sectionType === 'columns') {
                // For the 'columns' section, collect data from each individual column
                let columnsArray = [];
                $section.find('.columns-container .section-column').each(function() {
                    const $column = $(this);
                    let columnData = {
                        smallImgLink: $column.find('.small-img-link').val(),
                        wysiwygContent: (function() {
                            const $wysiwyg = $column.find('.wysiwyg');
                            const id = $wysiwyg.attr('id');
                            if (id && tinymce.get(id)) {
                                return tinymce.get(id).getContent();
                            }
                            return $wysiwyg.val(); // Fallback
                        })(),
                        btnText: $column.find('.btn-text').val(),
                        btnLink: $column.find('.btn-link').val(),
                        btnTarget: $column.find('input.btn-target').is(':checked')
                    };
                    columnsArray.push(columnData);
                });
                sectionData.columns = columnsArray; // Add the array of column data to the sectionData
            } else if (sectionType === 'shortcode') {
                sectionData.shortcode = $section.find('.shortcode').val();
            }

            // push section data to fieldsData array
            fieldsData.push(sectionData);
        });

        // add json encoded data to page builder editor field
        $('#z_sections_editor').val(JSON.stringify(fieldsData));
    }


    // --- TinyMCE Initialization ---

    // Initialize TinyMCE for WYSIWYG editors
    function initWysiwygEditors() {
        $('.wysiwyg').each(function () {
            const $textarea = $(this);
            const id        = $textarea.attr('id');

            if (!id || !tinymce.get(id)) {
                const uniqueId = 'wysiwyg-' + Date.now() + '-' + Math.floor(Math.random() * 1000);
                $textarea.attr('id', uniqueId);

                tinymce.init({
                    selector: '#' + uniqueId,

                    /* ------- ADD YOUR COLOUR SWATCHES HERE ------- */
                    // Hex‑label pairs, comma‑separated
                    textcolor_map: [
                        "404040", "Grey",
                        "FFFFFF", "White",
                        "d8dcec", "Light",
                        "122960", "Dark Blue",
                        "264898", "Blue",
                        "ffa736", "Orange"
                    ],
                    // Six swatches per row → 2 rows shows all 12 colours above
                    textcolor_rows: 2,
                    /* --------------------------------------------- */

                    menubar: false,
                    toolbar:
                        'formatselect | bold italic underline | forecolor backcolor | ' +
                        'alignleft aligncenter alignright alignjustify | ' +
                        'bullist numlist outdent indent | link unlink | undo redo',

                    // For TinyMCE 5/6 the colour buttons are built‑in;
                    // keep this if you’re on TinyMCE 4:
                    // plugins: 'lists link textcolor',
                    plugins: 'lists link textcolor',

                    branding: false,

                    setup: function (editor) {
                        editor.on('change', function () {
                            editor.save();
                            $('#' + editor.id).trigger('change');
                        });
                        editor.on('init', function () {
                            editor.save();
                            $('#' + editor.id).trigger('change');
                        });
                    }
                });
            }
        });
    }

    // Run once on page load
    $(document).ready(function () {
        // Ensure all existing WYSIWYGs have unique IDs and are initialized
        initWysiwygEditors();
        // Initial update after page load to capture existing data
        z_update_sections_editor(); 
    });


    // --- Sortable Sections ---
    // Ensure TinyMCE instances are properly destroyed and reinitialized on sort.
    $('#z_sections_editor_sections').sortable({
        items: 'section',
        handle: '.handle',
        placeholder: 'sortable-placeholder',
        axis: 'y', // Restrict dragging to vertical axis for better UX

        start: function(event, ui) {
            // Find and destroy editor inside the section being moved
            ui.item.find('textarea.wysiwyg').each(function() {
                const id = $(this).attr('id');
                const ed = tinymce.get(id);
                if (ed) {
                    ed.save(); // Save content before destroying
                    ed.remove();
                }
            });
        },
        stop: function(event, ui) {
            // Reinitialize editors after sorting
            initWysiwygEditors();
            z_update_sections_editor();
        }
    });


    // --- Media Uploader Logic ---

    // Call wordpress media uploader on click of small-img
    $(document).on('click', '#z_sections_editor_sections .small-img-select', function(e) {
        e.preventDefault();
        const $figure = $(this).closest('figure');
        const $input = $figure.find('input[type="hidden"]');
        const $imgPreview = $figure.find('img');
        
        // Create the media frame
        const frame = wp.media({
            title: 'Select or Upload Image',
            button: {
                text: 'Use this image'
            },
            multiple: false
        });

        // When an image is selected, run a callback.
        frame.on('select', function() {
            const attachment = frame.state().get('selection').first().toJSON();
            $input.val(attachment.url);
            $imgPreview.attr('src', attachment.url);
            $figure.addClass('has-image');
            z_update_sections_editor();
        });

        frame.open();
    });


    // remove image for small-img
    $(document).on('click', '#z_sections_editor_sections .small-img-remove', function(e) {
        e.preventDefault();
        const $figure = $(this).closest('figure');
        const $input = $figure.find('input[type="hidden"]');
        // Clear the input value and image source
        $input.val('');
        $figure.find('img').attr('src', '');
        $figure.removeClass('has-image');
        z_update_sections_editor();
    });


    // Call wordpress media uploader on click of large-img
    $(document).on('click', '#z_sections_editor_sections .large-img-preview', function(e) {
        e.preventDefault();
        const $img = $(this);
        const $input = $img.siblings('input[type="hidden"]');
        
        const frame = wp.media({
            title: 'Select or Upload Image',
            button: {
                text: 'Use this image'
            },
            multiple: false
        });

        frame.on('select', function() {
            const attachment = frame.state().get('selection').first().toJSON();
            $input.val(attachment.url);
            // if the is not an image, do not set the src to the image
            if (attachment.url.match(/\.(jpg|jpeg|png|gif)$/i)) {
                $img.attr('src', attachment.url);
            }
            else {
                $img.attr('src', '/wp-content/plugins/z-sections/assets/img/icon-video.svg');
            }
            // Assuming large-img-figure also needs 'has-image' class for styling
            $img.closest('.large-img-figure').addClass('has-image');
            z_update_sections_editor();
        });

        frame.open();
    });


    // remove image for large-img
    $(document).on('click', '#z_sections_editor_sections .large-img-remove', function(e) {
        e.preventDefault();
        const $figure = $(this).closest('figure'); // Adjusted to find closest figure
        const $img = $figure.find('img');
        const $input = $figure.find('input[type="hidden"]');
        // Clear the input value and image source
        $input.val('');
        $img.attr('src', '');
        $figure.removeClass('has-image'); // Remove the class as well
        z_update_sections_editor();
    });


    // Call wordpress media uploader on click of .select-bg-image
    $(document).on('click', '#z_sections_editor_sections .select-bg-image', function(e) {
        e.preventDefault();
        const $section = $(this).closest('section');
        const $input = $section.find('.section-bg');
        
        const frame = wp.media({
            title: 'Select or Upload Background Image',
            button: {
                text: 'Use this image'
            },
            multiple: false
        });

        frame.on('select', function() {
            const attachment = frame.state().get('selection').first().toJSON();
            $input.val(attachment.url);
            $section.css('background-image', 'url(' + attachment.url + ')');
            // Add a class to indicate background image is set (for CSS styling if needed)
            $section.addClass('has-bg-image');
            z_update_sections_editor();
        });

        frame.open();
    });

    // Remove background image on click of .remove-bg-image
    $(document).on('click', '#z_sections_editor_sections .remove-bg-image', function(e) {
        e.preventDefault();
        const $section = $(this).closest('section');
        const $input = $section.find('.section-bg');
        // Clear the input value and background image
        $input.val('');
        $section.css('background-image', 'none');
        $section.removeClass('has-bg-image');
        z_update_sections_editor();
    });


});